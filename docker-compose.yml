# version: '3.8'

x-airflow-common: &airflow-common
  # image: apache/airflow:2.7.1
  #image: airflow-pyspark 
  image: airflow-with-spark:latest
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    # - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:///opt/airflow/airflow.db
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_pass@postgres/airflow_metadata_db
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__LOGGING_LEVEL=INFO
    - AIRFLOW_UID=50000
    - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    - SPARK_HOME=/usr/local/spark

  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow-data/logs:/opt/airflow/logs
    - ./airflow-data/plugins:/opt/airflow/plugins
    - ./airflow-data/airflow.cfg:/opt/airflow/airflow.cfg
    - ./jars:/opt/airflow/jars
    - ./.env:/opt/airflow/.env
    - ./data:/opt/airflow/data
    - ./scripts:/opt/airflow/scripts
    # - ./airflow-data/airflow.db:/opt/airflow/airflow.db

  depends_on:
    - postgres
  networks:
    - retail-network

services:
  postgres:
    image: postgres:15-alpine
    container_name: retail-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/postgres:/docker-entrypoint-initdb.d
    networks:
      - retail-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # spark-master:
  #   image: bitnami/spark:latest
  #   container_name: spark-master
  #   environment:
  #     - SPARK_MODE=master
  #   ports:
  #     - "7077:7077"
  #     - "8081:8080"
  #   networks:
  #     - retail-network

  # spark-worker:
  #   image: bitnami/spark:latest
  #   container_name: spark-worker
  #   depends_on:
  #     - spark-master
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #   networks:
  #     - retail-network


  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || echo "User already exists"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
    - airflow-init
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
    - postgres
    - airflow-init
    restart: always

  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      - postgres
      - airflow-webserver
      - airflow-scheduler
    environment:
      # SUPERSET_DATABASE_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SUPERSET_DATABASE_URI: postgresql+psycopg2://${SUPERSET_DB_USER}:${SUPERSET_DB_PASS}@postgres:5432/${SUPERSET_DB_NAME}
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
    ports:
      - "8088:8088"
    volumes:
      - ./superset_home:/app/superset_home
    networks:
      - retail-network
    command: >
      bash -c "
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin || echo 'User exists' &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
      "

volumes:
  postgres_data:
  superset_home:
  airflow_logs:
  airflow_plugins:

networks:
  retail-network:
    driver: bridge
